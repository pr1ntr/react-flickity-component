{"version":3,"sources":["../src/index.js"],"names":["FlickityComponent","props","state","flickityReady","flickityCreated","cellCount","carousel","flkty","prevProps","prevState","children","options","draggable","initialIndex","reloadOnUpdate","deactivate","selectedIndex","undefined","activate","reloadCells","canUseDOM","Flickity","require","flickityRef","setReady","setState","setFlickityToReady","disableImagesLoaded","mountNode","querySelector","element","setTimeout","usableChildren","React","createElement","elementType","className","ref","c","renderPortal","Children","count","Component","propTypes","PropTypes","array","string","bool","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport imagesloaded from 'imagesloaded';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport PropTypes from 'prop-types';\n\nclass FlickityComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      flickityReady: false,\n      flickityCreated: false,\n      cellCount: 0,\n    };\n\n    this.carousel = null;\n    this.flkty = null;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let cellCount = React.Children.count(props.children);\n    if(cellCount === 1 && props.children.props.children) {\n      cellCount = React.Children.count(props.children.props.children)\n    }\n\n    if (cellCount !== state.cellCount)\n      return { flickityReady: false, cellCount };\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      children,\n      options: { draggable, initialIndex },\n      reloadOnUpdate,\n    } = this.props;\n    const { flickityReady, cellCount } = this.state;\n    if (reloadOnUpdate || (!prevState.flickityReady && flickityReady)) {\n      this.flkty.deactivate();\n      this.flkty.selectedIndex = initialIndex || 0;\n      this.flkty.options.draggable =\n        draggable === undefined\n          ? children\n            ? cellCount > 1\n            : false\n          : draggable;\n      this.flkty.activate();\n    } else {\n      this.flkty.reloadCells();\n    }\n  }\n\n  componentDidMount() {\n    if (!canUseDOM) return null;\n    const Flickity = require('flickity');\n    const { flickityRef, options } = this.props;\n    this.flkty = new Flickity(this.carousel, options);\n    if (flickityRef) flickityRef(this.flkty);\n    if (this.props.static) {\n      this.setReady();\n    } else {\n      this.setState({ flickityCreated: true });\n    }\n  }\n\n  setReady() {\n    if (this.state.flickityReady) return;\n    const setFlickityToReady = () => this.setState({ flickityReady: true });\n    if (this.props.disableImagesLoaded) setFlickityToReady();\n    else imagesloaded(this.carousel, setFlickityToReady);\n  }\n\n  renderPortal(children) {\n    if (!this.carousel) return null;\n    const mountNode = this.carousel.querySelector('.flickity-slider');\n    if (mountNode) {\n      const element = createPortal(children, mountNode);\n      setTimeout(() => this.setReady(), 10);\n      return element;\n    }\n  }\n\n  render() {\n\n    const { cellCount } = this.state\n\n    const usableChildren = cellCount === 1 ? this.props.children.props.children : this.props.children\n\n    return React.createElement(\n      this.props.elementType,\n      {\n        className: this.props.className,\n        ref: c => {\n          this.carousel = c;\n        },\n      },\n      this.props.static ? usableChildren : this.renderPortal(usableChildren)\n    );\n  }\n}\n\nFlickityComponent.propTypes = {\n  children: PropTypes.array,\n  className: PropTypes.string,\n  disableImagesLoaded: PropTypes.bool,\n  elementType: PropTypes.string,\n  flickityRef: PropTypes.func,\n  options: PropTypes.object,\n  reloadOnUpdate: PropTypes.bool,\n  static: PropTypes.bool,\n};\n\nFlickityComponent.defaultProps = {\n  className: '',\n  disableImagesLoaded: false,\n  elementType: 'div',\n  options: {},\n  reloadOnUpdate: false,\n  static: false,\n};\n\nexport default FlickityComponent;\n"],"file":"index.js"}